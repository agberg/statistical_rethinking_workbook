[{"path":"index.html","id":"about","chapter":"About","heading":"About","text":"workbook notes problems related Statistical Rethinking Richard McElreath (McElreath 2020).","code":""},{"path":"bayesian-inference.html","id":"bayesian-inference","chapter":"1 Bayesian Inference","heading":"1 Bayesian Inference","text":"first week covers Chapter 1 (Golem Prague), Chapter 2 (Small Worlds Large Worlds), Chapter 3 (Sampling Imaginary).","code":""},{"path":"bayesian-inference.html","id":"lectures","chapter":"1 Bayesian Inference","heading":"1.1 Lectures","text":"Lecture 1:Lecture 2:","code":""},{"path":"bayesian-inference.html","id":"exercises","chapter":"1 Bayesian Inference","heading":"1.2 Exercises","text":"","code":""},{"path":"bayesian-inference.html","id":"chapter-1","chapter":"1 Bayesian Inference","heading":"1.2.1 Chapter 1","text":"exercises Chapter 1.","code":""},{"path":"bayesian-inference.html","id":"chapter-2","chapter":"1 Bayesian Inference","heading":"1.2.2 Chapter 2","text":"2E1. expressions correspond statement: probability rain Monday?\n(1) Pr(rain)\n(2) Pr(rain|Monday)\n(3) Pr(Monday|rain)\n(4) Pr(rain, Monday) / Pr(Monday)Answers 1 4 describe probability rain Monday.2E2. following statements corresponds expression: Pr(Monday|rain)?\n(1) probability rain Monday.\n(2) probability rain, given Monday.\n(3) probability Monday, given raining.\n(4) probability Monday raining.Answer 3 answer satisfies question. Answer 4 satisfy divided probability rain.2E3. following expressions correspond statement: probability Monday, given raining?\n(1) Pr(Monday|rain)\n(2) Pr(rain|Monday)\n(3) Pr(rain|Monday) Pr(Monday)\n(4) Pr(rain|Monday) Pr(Monday) / Pr(rain)\n(5) Pr(Monday|rain) Pr(rain) / Pr(Monday)Answers 1 4 equivalent satisfy question.2E4. Bayesian statistician Bruno de Finetti (1906–1985) began 1973 book probability theory dedication: “PROBABILITY EXIST.” capitals appeared original, imagine de Finetti wanted us shout statement. meant probability device describing uncertainty perspective observer limited knowledge; objective reality. Discuss globe tossing example chapter, light statement. mean say “probability water 0.7?”describing probability random observation 0.7. existence water certain binary every piece globe, proportion water land. trying use random observation subset globe infer estimate proportion water land. thing describing exist globe - probability observation; proxy real thing trying describe (proportion water land.)2M1. Recall globe tossing model chapter. Compute plot grid approximate posterior distribution following sets observations. case, assume uniform prior p.\n(1) W, W, W\n(2) W, W, W, L\n(3) L, W, W, L, W, W, W2M2. Now assume prior p equal zero p < 0.5 positive constant p ≥ 0.5. compute plot grid approximate posterior distribution sets observations problem just .2M3. Suppose two globes, one Earth one Mars. Earth globe 70% covered water. Mars globe 100% land. suppose one globes—don’t know —tossed air produced “land” observatiion. Assume globe equally likely tossed. Show posterior probability globe Earth, conditional seeing “land” (Pr(Earth|land)), 0.23.2M4. Suppose deck three cards. card two sides, side either black white. One card two black sides. second card one black one white side. third card two white sides. Now suppose three cards placed bag shuffled. Someone reaches bag pulls card places flat table. black side shown facing , don’t know color side facing . Show probability side also black 2/3. Use counting method (Section 2 chapter) approach problem. means counting ways card produce observed data (black side facing table).2M5. Now suppose four cards: B/B, B/W, W/W, another B/B. suppose card drawn bag black side appears face . calculate probability side black.2M6. Imagine black ink heavy, cards black sides heavier cards white sides. result, ’s less likely card black sides pulled bag. assume three cards: B/B, B/W, W/W. experimenting number times, conclude every way pull B/B card bag, 2 ways pull B/W card 3 ways pull W/W card. suppose card pulled black side appears face . Show probability side black now 0.5. Use counting method, .2M7. Assume original card problem, single card showing black side face . looking side, draw another card bag lay face table. face shown new card white. Show probability first card, one showing black side, black side now 0.75. Use counting method, can. Hint: Treat like sequence globe tosses, countng ways see observation, possiible first card.2H1. Suppose two species panda bear. equally common wild live sample places. look exactly alike eat food, yet genetic assay capable telling apart. differ however family sizes. Species gives birth twins 10% time, otherwise birthing single infant. Species births twins 20% time, ottherwise birthing singleton infants. Assume numbers known certainty, many years field research.\nNow suppose managing captive panda breeding program. newe female panda unknown species, just given birth twins. probability next birth also twins?Copied results online workbook presentation MUCH cleaner solution.(Thompson, n.d.)2H2. Recall facts problem . Now compute probability panda species , asssuming observed first birth twins.2H3. Continuing previous problem, suppose panda mother second birth twins, singleton infant. Compute posterior probability panda species .2H4. common boast Bayesian statisticians Bayesian inference makes easy use data, even data different types.\nsuppose now veterinarian comes along new genetic test claims can identify species mother panda. test, like tests, imperfect. information test:probability correctly identifies species panda 0.8.probability correctly identifies species B panda 0.65.vet administers test panda tells test positive species . First ignore previous information births compute posterior probability panda species . redo calculation, now using birth data well.","code":"\nlibrary(magrittr)\nlibrary(ggplot2)\nlibrary(patchwork)\n\nprior_input <- function(probabilities){\n  1\n}\n\nglobe_tossing_function <- function(water, total, prior = prior_input, length_output = 101) {\n\n  to_return <-\n    tibble::tibble(p_grid = seq(from = 0, to = 1, length.out = length_output),      # define grid\n           prior  = prior_input(p_grid)) %>%                                       # define prior\n    dplyr::mutate(likelihood = dbinom(water, size = total, prob = p_grid)) %>%  # compute likelihood at each value in grid\n    dplyr::mutate(unstd_posterior = likelihood * prior) %>%             # compute product of likelihood and prior\n    dplyr::mutate(posterior = unstd_posterior / sum(unstd_posterior))   # standardize the posterior, so it sums to 1\n\n  \n    \n}\n\none <- globe_tossing_function(3, 3) %>%\n  ggplot(data = ., mapping = aes(x = p_grid, y = posterior)) +\n  geom_line()\n\n\ntwo <- globe_tossing_function(3, 4) %>%\n  ggplot(data = ., mapping = aes(x = p_grid, y = posterior)) +\n  geom_line()\n\nthree <- globe_tossing_function(5, 7) %>%\n  ggplot(data = ., mapping = aes(x = p_grid, y = posterior)) +\n  geom_line()\n\none + two + three\nlibrary(magrittr)\nlibrary(ggplot2)\nlibrary(patchwork)\n\nprior_input <- function(probability){\n  dplyr::case_when(\n    probability < 0.5 ~ 0,\n    # probability > .8 ~ 0.5,\n    TRUE ~ 1\n  )\n}\n\nglobe_tossing_function <- function(water, total, prior = prior_input, length_output = 101) {\n\n  to_return <-\n    tibble::tibble(p_grid = seq(from = 0, to = 1, length.out = length_output),      # define grid\n           prior  = prior_input(p_grid)) %>%                                       # define prior\n    dplyr::mutate(likelihood = dbinom(water, size = total, prob = p_grid)) %>%  # compute likelihood at each value in grid\n    dplyr::mutate(unstd_posterior = likelihood * prior) %>%             # compute product of likelihood and prior\n    dplyr::mutate(posterior = unstd_posterior / sum(unstd_posterior))   # standardize the posterior, so it sums to 1\n\n  \n    \n}\n\none <- globe_tossing_function(3, 3) %>%\n  ggplot(data = ., mapping = aes(x = p_grid, y = posterior)) +\n  geom_line()\n\n\ntwo <- globe_tossing_function(3, 4) %>%\n  ggplot(data = ., mapping = aes(x = p_grid, y = posterior)) +\n  geom_line()\n\nthree <- globe_tossing_function(5, 7) %>%\n  ggplot(data = ., mapping = aes(x = p_grid, y = posterior)) +\n  geom_line()\n\none + two + three\nlibrary(magrittr)\n\n# Probability of Land, Given Earth\nple <- .3\n\n\n# Probability of Land, Given Mars\n\nplm <- 1\n\n\n# Proability of Earth\n\npe <- .5\n\n# Probability of Land\n\npl <- ple*pe + plm*(1-pe)\n\n\n# Probability of Earth, Given Land\n\npegl <- ple * pe / pl\n# Probability of black side\n\ntwo_black <- 1\none_black <- .5\nzero_black <- 0\n\nprobability_two_black_given_first_black <- (1)/(1+.5)\n# Probability of black side\n\ntwo_black <- 1 * 2\none_black <- .5\nzero_black <- 0\n\nprobability_two_black_given_first_black <- (two_black)/(two_black + one_black)\ntwo_black <- 1\none_black <- .5 * 2\nzero_black <- 0 * 3\n\nprobability_two_black_given_first_black <- (two_black)/(two_black + one_black)\n#BB, B: 2\n##BW, W: 1 --> 2\n##WW, W: 2 --> 4\n\n#BW, B: 1\n##WW, W: 2 --> 2\n##BB, W: 0 --> 0\n\n#WW, B: 0\n\n(2+4)/(2+4+2)## [1] 0.75\n# After first birth, likelihood of species A and B is equal to the rate the\n# species give birth to twins\na_likelihood <- 0.1\nb_likelihood <- 0.2\n\n# Next calculate the posterior probability that the panda belongs to each\n# species, assume species are equally likely\nlikelihood <- c(a_likelihood, b_likelihood)\nprior <- c(1, 1) \nposterior <- likelihood * prior\nposterior <- posterior / sum(posterior)\nposterior## [1] 0.3333333 0.6666667\n#> [1] 0.333 0.667\n\n# The probability the next birth is twins is the probability the panda belongs\n# to each species times the likelihood each species gives birth to twins\n(posterior[1] * a_likelihood) + (posterior[2] * b_likelihood)## [1] 0.1666667\n#> [1] 0.167\n\n# AGB: I got the same solution, but this presentation is MUCH cleaner.  Saving it for reference.\nposterior[1]## [1] 0.3333333\nprior <- posterior\nlikelihood <- c(0.9, 0.8)\n\nposterior <- likelihood*prior\nposterior <- posterior / sum(posterior)\n\nposterior[1]## [1] 0.36\nprior <- c(1,1)\n\ncorrect_a <- 0.8\ncorrect_b <- .65\nincorrect_a <- 1-correct_a\nincorrect_b <- 1-correct_b\n\nlikelihood_a_a <- correct_a\nlikelihood_b_a <- incorrect_b\n\nlikelihood <- c(likelihood_a_a, likelihood_b_a)\n\nposterior <- likelihood*prior\nposterior <- posterior / sum(posterior)\n\nposterior[1]## [1] 0.6956522\n# --\n\nprior <- posterior\n\nlikelihood <- c(.1*(1-.1), .2*(1-.2))\n\nposterior <- likelihood*prior\nposterior <- posterior / sum(posterior)\n\nposterior[1]## [1] 0.5625"},{"path":"bayesian-inference.html","id":"chapter-3","chapter":"1 Bayesian Inference","heading":"1.2.3 Chapter 3","text":"Easy. Easy problems use sample posterior distribution globe tossing example. code give specific set samples, can check answers exactly.Use values samples answer questions follow.3E1. much posterior probability lies p = 0.2?3E2. much posterior probability lies p = 0.8?3E3. much posterior probability lies p = 0.2 p = 0.8?3E4. 20% posterior probability lies value p?3E5. 20% posterior probability lies value p?3E6. values p contain narrowest interval equal 66% posterior probability?3E7. values p contain 66% posterior probability, assuming equal posterior probability interval?3M1. Suppose globe tossing data turned 8 water 15 tosses. Constructe posterior distribution, using grid approximation. Use flat prior .3M2. Draw 10,000 samples grid approximation . use sample calculate 90% HPDI p.3M3. Construct posterior predictive check model data. means simulate distribution samples, averaging posterior uncertainty p. probability observing 8 water 15 tosses?3M4. Using posterior distribution constructed new (8/15) data, now calculate probability observing 6 water 9 tosses.3M5. Start 3M1, now use prior zero p = 0.5 constant p = 0.5. corresponds prior information majority Earth’s surface water. Repeat problem compare inferences (using priors) true value p = 0.7.3M6. Suppose want estimate Earth’s proportion water precisely. Specifically, want 99% percentile interval posterior distribution p 0.05 wide. means distance upper lower bound interval 0.05. many times toss globe ?Hard. Hard problems use data . data indicate gender (male = 1, female = 0) officially reported first second born children 100 two-child families. example, first family data reported boy (1) girl (0). second family reported girl (0) boy (1). third family reported two girls. can load tow vectors R’s memory typing:Use vectors data. example compute total number boys born across births, use:3H1. Using grid approximation, compute posterior distribution probability birth boy. Assume uniform prior probability. parameter value maximizes posterior probability?3H2. Using sample function, draw 10,000 random parameter values posterior distribution calculated . Use sample estimate 50%, 89%, 97% highest posterior density intervals.3H3. Use rbinom simulate 10,000 replicates 200 births. end 10,000 numbers, one count boys 200 births. Compare distribution predicted numbers boys actual count data (111 boys 200 births). many good ways visualize simulations, dens command (part rethinking package) probably easiest way case. look like model fits data well? , distribution predictions include actual observation central, likely outcome?3H4. Now compare 10,000 counts boys 100 simulated first borns number boys first births, birth1. model look light?3H5. model assumes sex first second births independent. check assumption, focus now second births followed female first borns. Compare 10,000 simulated conts boys second births followed girls. correctly, need count number first borns girls simulate many births, 10,000 times. Compare counts boys simulations actual observed count boys following girls. model look light? guesses going data?","code":"\np_grid <- seq(from = 0, to = 1, length.out = 1000)\nprior <- rep(1, 1000)\nlikelihood <- dbinom(6, size = 9, prob = p_grid)\nposterior <- likelihood * prior\nposterior <- posterior / sum(posterior)\nset.seed(100)\nsamples <- sample(p_grid, prob = posterior, size = 1e4, replace = TRUE)\nround(sum(samples < .2) / length(samples), 6)## [1] 4e-04\nround(sum(samples > .8) / length(samples), 6)## [1] 0.1116\nround(sum(samples < .8 & samples >.2) / length(samples), 6)## [1] 0.888\nquantile(samples, .2)##       20% \n## 0.5185185\nquantile(samples, .8)##       80% \n## 0.7557558\nrethinking::HPDI(samples, prob = .66)##     |0.66     0.66| \n## 0.5085085 0.7737738\nrethinking::PI(samples, prob = .66)##       17%       83% \n## 0.5025025 0.7697698\nlibrary(magrittr)\nlibrary(ggplot2)\nlibrary(patchwork)\n\nglobe_tossing <- tibble::tibble(\n  p_grid = seq(from = 0, to = 1, length.out = 1000)\n) %>%\n  dplyr::mutate(\n    prior = 1,\n    likelihood = dbinom(8, size = 15, prob = p_grid),\n    posterior = prior * likelihood,\n    posterior = posterior / sum(posterior)\n  )\n\nposterior_plot <- ggplot(data = globe_tossing, aes(y = posterior, x = p_grid)) +\n  geom_line()\n\nset.seed(100)\n\n# samples_new <- tibble::tibble(\n#   sampled_values = sample(globe_tossing$p_grid, prob = globe_tossing$posterior, size = 1e4, replace = TRUE)\n# )\n# \n# sampled_posterior_plot <- ggplot(data = samples_new, aes(x = sampled_values)) +\n#   geom_histogram()\n# \n# posterior_plot + sampled_posterior_plot\nset.seed(101)\nsamples_for_hpdi <- sample(globe_tossing$p_grid, 1e4, replace = TRUE, prob = globe_tossing$posterior)\n\nrethinking::HPDI(samples_for_hpdi, .9)##      |0.9      0.9| \n## 0.3343343 0.7217217\nwater <- rbinom(1e4, 15, samples_for_hpdi)\n\nmean(water == 8)## [1] 0.1499\nsix_in_nine <- rbinom(1e4, 9, samples_for_hpdi)\n\nmean(six_in_nine == 6)## [1] 0.1714\nlibrary(magrittr)\nlibrary(ggplot2)\nlibrary(patchwork)\n\nglobe_tossing <- tibble::tibble(\n  p_grid = seq(from = 0, to = 1, length.out = 1000)\n) %>%\n  dplyr::mutate(\n    prior = dplyr::case_when(\n      p_grid < 0.5 ~ 0,\n      TRUE ~ 1\n    ),\n    likelihood = dbinom(8, size = 15, prob = p_grid),\n    posterior = prior * likelihood,\n    posterior = posterior / sum(posterior)\n  )\n\n# --\n\nset.seed(101)\nsamples_for_hpdi <- sample(globe_tossing$p_grid, 1e4, replace = TRUE, prob = globe_tossing$posterior)\n\nrethinking::HPDI(samples_for_hpdi, .9)##      |0.9      0.9| \n## 0.5005005 0.7107107\n# --\n\nwater <- rbinom(1e4, 15, samples_for_hpdi)\n\nmean(water == 8)## [1] 0.1614\n# --\n\nsix_in_nine <- rbinom(1e4, 9, samples_for_hpdi)\n\nmean(six_in_nine == 6)## [1] 0.2362\n# --\n# library(future.callr)\nlibrary(magrittr)\n# plan(callr)\n\nsingle_interval <- function(prior_tibble_input, samples_input, real_prob_input = .7){\n  \n  globe_tossing <- prior_tibble_input %>%\n    dplyr::mutate(\n      likelihood = dbinom(\n        rbinom(1, samples_input, real_prob_input),\n        size = samples_input, prob = p_grid),\n      posterior = prior * likelihood,\n      posterior = posterior / sum(posterior)\n    )\n  \n  samples_for_hpdi <- sample(globe_tossing$p_grid, samples_input, replace = TRUE, prob = globe_tossing$posterior)\n\n  hpdi <- rethinking::HPDI(samples_for_hpdi, .99)\n  round(as.numeric(hpdi[2] - hpdi[1]), 3)\n  \n}\n\nrepeated_single_interval <- function(prior_tibble_input, samples_input, \n                                     number_repetitions_input, real_prob_input = .7){\n  \n  output <- rep(NA_real_, number_repetitions_input) %>%\n    purrr::map_dbl(\n      ~ single_interval(prior_tibble_input = prior_tibble, \n                        samples_input = samples_input, \n                        real_prob_input = 0.7)\n    )\n  \n}\n\n\nprior_tibble <- tibble::tibble(\n  p_grid = seq(from = 0, to = 1, length.out = 1001),\n) %>%\n  dplyr::mutate(\n    prior = dplyr::case_when(\n      # p_grid < 0.5 ~ 0,\n      TRUE ~ 1\n    )\n    )\n\ndifferent_sample_sized <- tibble::tibble(samples = seq(from=1e1, to=1e5, by = 1e3)) %>%\n    dplyr::mutate(\n    ranges = purrr::map(.x = samples, .f = ~repeated_single_interval(\n      prior_tibble_input = prior_tibble_input,\n      samples_input = .x,\n      number_repetitions_input = 10,\n      real_prob_input = 0.7\n    ), \n    )\n  ) %>%\n  dplyr::mutate(\n    average = purrr::map(ranges, ~mean(.x))\n  )\nlibrary(rethinking)## Loading required package: rstan## Loading required package: StanHeaders## rstan (Version 2.21.3, GitRev: 2e1f913d3ca3)## For execution on a local, multicore CPU with excess RAM we recommend calling\n## options(mc.cores = parallel::detectCores()).\n## To avoid recompilation of unchanged Stan programs, we recommend calling\n## rstan_options(auto_write = TRUE)## \n## Attaching package: 'rstan'## The following object is masked from 'package:magrittr':\n## \n##     extract## Loading required package: cmdstanr## This is cmdstanr version 0.4.0.9001## - CmdStanR documentation and vignettes: mc-stan.org/cmdstanr## - Use set_cmdstan_path() to set the path to CmdStan## - Use install_cmdstan() to install CmdStan## Loading required package: parallel## rethinking (Version 2.21)## \n## Attaching package: 'rethinking'## The following object is masked from 'package:rstan':\n## \n##     stan## The following object is masked from 'package:stats':\n## \n##     rstudent\ndata(homeworkch3)\n\nbirth_data <- tibble::tibble(birth1, birth2)\nsum(birth1) + sum(birth2)## [1] 111\nlibrary(ggplot2)\n\ncount_boy <- sum(birth1) + sum(birth2)\ntotal_count <- length(birth1) + length(birth2)\n\nprob_of_born_boy <- tibble::tibble(\n  p_grid = seq(from = 0, to = 1, length.out = 1001)\n) %>%\n  dplyr::mutate(\n    prior = 1,\n    likelihood = dbinom(count_boy, total_count, prob = p_grid),\n    posterior = likelihood * prior,\n    posterior = round(posterior / sum(posterior), 4)\n  )\n\nggplot(data = prob_of_born_boy, aes(y = posterior, x = p_grid)) +\n  geom_line()\nprob_of_born_boy %>%\n  dplyr::arrange(desc(posterior)) %>%\n  dplyr::slice(1)## # A tibble: 1 × 4\n##   p_grid prior likelihood posterior\n##    <dbl> <dbl>      <dbl>     <dbl>\n## 1  0.552     1     0.0565    0.0114\nset.seed(300)\nsampled_draws <- sample(prob_of_born_boy$p_grid, size = 1e4, replace = TRUE, prob = prob_of_born_boy$posterior)\n\nhpdi_intervals <- tibble::tibble(to_sample = c(.5, .89, .9)) %>%\n  dplyr::mutate(\n   intervals = purrr::map(to_sample, ~rethinking::HPDI(sampled_draws, prob = .x)) \n  ) %>%\n  tidyr::unnest(intervals)\n\nhpdi_intervals## # A tibble: 6 × 2\n##   to_sample intervals\n##       <dbl>     <dbl>\n## 1      0.5      0.529\n## 2      0.5      0.577\n## 3      0.89     0.499\n## 4      0.89     0.61 \n## 5      0.9      0.494\n## 6      0.9      0.609\nlibrary(ggplot2)\nlibrary(patchwork)\n\nbreak_func <- function(x) {\n  length(seq(min(x), max(x), by = 1)) + 1\n}\n\nset.seed(100)\np_sampled <- sample(prob_of_born_boy$p_grid, size = 1e4, replace = TRUE, prob = prob_of_born_boy$posterior)\nsim_data <- rbinom(1e4, 200, prob = p_sampled)\nsimulated_data <- dplyr::bind_cols(outcome = sim_data, p_sampled = p_sampled)\n\nggplot(data = simulated_data, aes(x = outcome)) +\n  ggdist::stat_histinterval(\n    .width = c(0.66, 0.89), breaks = break_func\n  ) +\n  geom_vline(aes(xintercept = count_boy), linetype = \"dashed\", color = \"red\") +\n  labs(x = \"Number of Boys\", y = \"Density\")\nlibrary(ggplot2)\nlibrary(patchwork)\n\nbreak_func <- function(x) {\n  length(seq(min(x), max(x), by = 1)) + 1\n}\n\nset.seed(100)\np_sampled <- sample(prob_of_born_boy$p_grid, size = 1e4, replace = TRUE, prob = prob_of_born_boy$posterior)\nsim_data <- rbinom(1e4, 100, prob = p_sampled)\nsimulated_data <- dplyr::bind_cols(outcome = sim_data, p_sampled = p_sampled)\n\nggplot(data = simulated_data, aes(x = outcome)) +\n  ggdist::stat_histinterval(\n    .width = c(0.66, 0.89), breaks = break_func\n  ) +\n  geom_vline(aes(xintercept = sum(birth1)), linetype = \"dashed\", color = \"red\") +\n  geom_vline(aes(xintercept = sum(birth2)), linetype = \"dashed\", color = \"blue\") +\n  labs(x = \"Number of Boys\", y = \"Density\")\nfemale_male_count <- sum(birth2[birth1 == 0])\nfemale_first <- sum(birth1 == 1)\n\n\nset.seed(100)\np_sampled <- sample(prob_of_born_boy$p_grid, size = 1e4, replace = TRUE, prob = prob_of_born_boy$posterior)\nsim_data <- rbinom(1e4, female_first, prob = p_sampled)\nsimulated_data_female_first <- dplyr::bind_cols(outcome = sim_data, p_sampled = p_sampled)\n\nggplot(data = simulated_data_female_first, aes(x = outcome)) +\n  ggdist::stat_histinterval(\n    .width = c(0.66, 0.89), breaks = break_func\n  ) +\n  geom_vline(aes(xintercept = female_male_count), linetype = \"dashed\", color = \"red\") +\n  labs(x = \"Number of Boys After Girl\", y = \"Density\")"},{"path":"bayesian-inference.html","id":"homework","chapter":"1 Bayesian Inference","heading":"1.3 Homework","text":"1. Suppose globe tossing data (Chapter 2) turned 4 water 11 land. Construct posterior distribution, using grid approximation. Use flat prior book.2. Now suppose data 4 water 2 land. Compute posterior , time use prior zero p = 0.5 constant p = 0.5. corresponds prior information majority Earth’s surface water.3. posterior distribution 2, compute 89% percentile HPDI intervals. Compare widths intervals. wider? ? information interval, might misunderstand shape posterior distribution?percentile wider enforce symmetry lower upper tails. useful constraint, given prior says upper tail likely longer lower tail given constraint prior.4. OPTIONAL CHALLENGE. Suppose bias sampling Land likely Water recorded. Specifically, assume 1--5 (20%) Water samples accidentally recorded instead “Land.” First, write generative simulation sampling process. Assuming true proportion Water 0.70, proportion simulation tend produce instead? Second, using simulated sample 20 tosses, compute unbiased posterior distribution true proportion water.","code":"\nwater <- 4\ntotal <- 4 + 11\n\nbreak_func <- function(x) {\n  length(seq(min(x), max(x), by = 1)) + 1\n}\n\n\nglobe_tossing <- tibble::tibble(p_grid = seq(from = 0, to = 1, length.out = 1001)) %>%\n  dplyr::mutate(\n    prior = 1,\n    likelihood = dbinom(water, total, p = p_grid),\n    posterior = prior * likelihood,\n    posterior = posterior / sum(posterior)\n  )\n\nggplot(globe_tossing, aes(y = posterior, x = p_grid)) +\n  geom_line() +\n  geom_vline(aes(xintercept = water/total), linetype = \"dashed\", color = \"red\")\n# --\n\nset.seed(100)\n\nsampled_draws <- sample(globe_tossing$p_grid, 1e4, prob = globe_tossing$posterior, replace = TRUE)\n\nhpdi_intervals <- tibble::tibble(intervals_of_interest = c(.5, .89, .9)) %>%\n  dplyr::mutate(\n   intervals = purrr::map(intervals_of_interest, ~setNames(rethinking::HPDI(sampled_draws, prob = .x), c(\"lower\", \"upper\"))) \n  ) %>%\n  tidyr::unnest_wider(intervals)\n\nhpdi_intervals## # A tibble: 3 × 3\n##   intervals_of_interest lower upper\n##                   <dbl> <dbl> <dbl>\n## 1                  0.5  0.209 0.352\n## 2                  0.89 0.112 0.447\n## 3                  0.9  0.114 0.458\n# --\n\nsim_data <- rbinom(1e4, total, prob = sampled_draws)\nsimulated_data <- dplyr::bind_cols(outcome = sim_data, p_sampled = sampled_draws)\n\nggplot(data = simulated_data, aes(x = outcome)) +\n  ggdist::stat_histinterval(\n    .width = c(0.66, 0.89), breaks = break_func\n  ) +\n  geom_vline(aes(xintercept = water), linetype = \"dashed\", color = \"red\")\nlibrary(magrittr)\nlibrary(ggplot2)\n\nwater <- 4\ntotal <- 4 + 2\n\nbreak_func <- function(x) {\n  length(seq(min(x), max(x), by = 1)) + 1\n}\n\n\nglobe_tossing <- tibble::tibble(p_grid = seq(from = 0, to = 1, length.out = 1001)) %>%\n  dplyr::mutate(\n    prior = ifelse(p_grid < .5, 0, 1),\n    likelihood = dbinom(water, total, p = p_grid),\n    posterior = prior * likelihood,\n    posterior = posterior / sum(posterior)\n  )\n\nggplot(globe_tossing, aes(y = posterior, x = p_grid)) +\n    geom_line() +\n    geom_vline(aes(xintercept = water/total), linetype = \"dashed\", color = \"red\")\n# --\n\nset.seed(100)\n\nsampled_draws <- sample(globe_tossing$p_grid, 1e4, prob = globe_tossing$posterior, replace = TRUE)\n\nhpdi_intervals <- tibble::tibble(intervals_of_interest = c(.5, .89, .9)) %>%\n  dplyr::mutate(\n   intervals = purrr::map(intervals_of_interest, ~setNames(rethinking::HPDI(sampled_draws, prob = .x), c(\"lower\", \"upper\"))),\n   percentile = purrr::map(intervals_of_interest, ~setNames(rethinking::PI(sampled_draws, prob = .x), c(\"lower\", \"upper\")))\n  ) %>%\n  tidyr::pivot_longer(cols = c(intervals, percentile)) %>%\n  tidyr::unnest_wider(value) %>%\n  tidyr::pivot_wider(names_from = name, values_from = c(lower, upper))\n\nhpdi_intervals## # A tibble: 3 × 5\n##   intervals_of_interest lower_intervals lower_percentile upper_intervals upper_percentile\n##                   <dbl>           <dbl>            <dbl>           <dbl>            <dbl>\n## 1                  0.5            0.574            0.599           0.745            0.773\n## 2                  0.89           0.5              0.524           0.84             0.88 \n## 3                  0.9            0.5              0.522           0.846            0.885\n# --\n\nsim_data <- rbinom(1e4, total, prob = sampled_draws)\nsimulated_data <- dplyr::bind_cols(outcome = sim_data, p_sampled = sampled_draws)\n\nggplot(data = simulated_data, aes(x = outcome)) +\n  ggdist::stat_histinterval(\n    .width = c(0.66, 0.89), breaks = break_func\n  ) +\n  geom_vline(aes(xintercept = water), linetype = \"dashed\", color = \"red\")\nset.seed(123)\n\nglobe_tossing %>% \n  dplyr::slice_sample(n = 10000, weight_by = posterior, replace = TRUE) %>% \n  dplyr::mutate(\n    sim_water = rbinom(dplyr::n(), total, prob = p_grid)\n    ) %>%\n  ggplot(aes(x = sim_water)) +\n  ggdist::stat_histinterval(.width = c(0.67, 0.89, 0.97), breaks = seq(0, total, 1),\n                    point_interval = ggdist::mean_hdci) +\n  labs(x = \"Proportion Water (p)\", y = \"Posterior Density\") +\n  geom_vline(aes(xintercept = water), linetype = \"dashed\", color = \"red\") +\n  ggthemes::theme_economist()\nglobe_tossing %>% \n  dplyr::slice_sample(n = 10000, weight_by = posterior, replace = TRUE) %>% \n  ggplot(aes(x = p_grid)) +\n  ggdist::stat_histinterval(.width = c(0.67, 0.89, 0.97), breaks = seq(0, 1, .02),\n                    point_interval = ggdist::mean_hdci) +\n  labs(x = \"Proportion Water (p)\", y = \"Posterior Density\") +\n  ggthemes::theme_economist()\n# Generative simulation\n\nbiased_globe_toss <- function(samples_input, true_p_input, error_given_true_input){\n  \n  is_land <- rbinom(samples_input, 1, true_p_input)\n  is_not_error <- rbinom(is_land, 1, 1-error_given_true_input)\n  \n  is_land*is_not_error\n  \n  # is_not_error <- runif(samples_input) > error_given_true_input\n  # to_return <- is_land * is_not_error\n  \n}\n\n# Assuming correct proportion is .7, what will a simulation observe\n\ntrue_amount <- .7\nerror_given_true <- .2\nsamples <- 1e5\n\ncatch <- biased_globe_toss(samples, true_amount, error_given_true)\n\ncatch_true <- rbinom(samples, 1, true_amount)\n\nmean(catch)## [1] 0.55656\nmean(catch_true)## [1] 0.69947\n# --\nlibrary(magrittr)\nlibrary(ggplot2)\nlibrary(patchwork)\n\n# Simulated tosses\n\n# set.seed(100)\nbiased_observations <- biased_globe_toss(20, .7, .2)\n\n# --\n\nglobe_tossing_biased_and_unbiased <- tibble::tibble(p_grid = seq(from = 0, to = 1, length.out = 1001)) %>%\n  dplyr::mutate(\n    prior = 1,\n    biased_likelihood = dbinom(sum(biased_observations), length(biased_observations), p = p_grid),\n    biased_posterior = prior * biased_likelihood,\n    biased_posterior = biased_posterior / sum(biased_posterior),\n    \n    unbiased_likelihood = dbinom(sum(biased_observations), length(biased_observations), p = p_grid*.8),\n    unbiased_posterior = prior * unbiased_likelihood,\n    unbiased_posterior = unbiased_posterior / sum(unbiased_posterior),\n  )\n\n\nggplot(globe_tossing_biased_and_unbiased, aes(x = p_grid)) +\n  geomtextpath::geom_textline(aes(y = biased_posterior), linetype = \"dashed\", color = \"grey70\",\n                size = 6, linewidth = 1, label = \"Biased\", hjust = 0.45,\n                family = \"Source Sans Pro\") +\n  geomtextpath::geom_textline(aes(y = unbiased_posterior), linetype = \"solid\", color = \"#009FB7\",\n                size = 6, linewidth = 1, label = \"Corrected\", hjust = 0.4,\n                family = \"Source Sans Pro\") +\n  scale_x_continuous(breaks = seq(0, 1, 0.1)) +\n  labs(x = \"Proportion Water (p)\", y = \"Posterior Density\")\nlibrary(magrittr)\nlibrary(ggplot2)\nlibrary(patchwork)\n\n# Generative simulation\n\nbiased_globe_toss <- function(samples_input, true_p_input, error_given_true_input, error_given_false_input){\n  \n  is_water <- rbinom(samples_input, 1, true_p_input)\n  is_not_water_error <- rbinom(is_water, 1, 1-error_given_true_input)\n  \n  observed_water <- is_water*is_not_water_error\n  \n  # is_not_error <- runif(samples_input) > error_given_true_input\n  # to_return <- is_land * is_not_error\n  \n  is_land <- 1-(is_water)\n  is_land_error <- rbinom(is_land, 1, error_given_false_input)\n  \n  observed_water_two <- is_land * is_land_error\n  \n  observed_water + observed_water_two\n  \n  \n}\n\n# Assuming correct proportion is .7, what will a simulation observe\n\ntrue_amount <- .7\nerror_given_true <- 0.25\nerror_given_false <- 0.25\nsamples <- 1e5\n\ncatch <- biased_globe_toss(samples, true_amount, error_given_true, error_given_false)\n\ncatch_true <- rbinom(samples, 1, true_amount)\n\nmean(catch)## [1] 0.60137\nmean(catch_true)## [1] 0.69852\ncatch2 <- rbinom(samples, 1, true_amount*(1-error_given_true) + (1-true_amount)*error_given_false)\n\nmean(catch2)## [1] 0.60255\n# --\n\n\n# Simulated tosses\n\n# set.seed(100)\nbiased_observations <- rbinom(1e3, 1, \n                              prob = true_amount*(1-error_given_true) + (1-true_amount)*error_given_false)\n\n\n\n# --\n\nglobe_tossing_biased_and_unbiased <- tibble::tibble(p_grid = seq(from = 0, to = 1, length.out = 1001)) %>%\n  dplyr::mutate(\n    prior = ifelse(p_grid <.5, 0, 1),\n    prior = ifelse(p_grid > .9, 0, prior),\n    biased_likelihood = dbinom(sum(biased_observations), length(biased_observations), p = p_grid),\n    biased_posterior = prior * biased_likelihood,\n    biased_posterior = biased_posterior / sum(biased_posterior),\n    \n    unbiased_likelihood = dbinom(sum(biased_observations), length(biased_observations), p = p_grid*(1-error_given_true) + (1-p_grid)*error_given_false),\n    unbiased_posterior = prior * unbiased_likelihood,\n    unbiased_posterior = unbiased_posterior / sum(unbiased_posterior),\n  )\n\n\nggplot(globe_tossing_biased_and_unbiased, aes(x = p_grid)) +\n  geomtextpath::geom_textline(aes(y = biased_posterior), linetype = \"dashed\", color = \"grey70\",\n                size = 6, linewidth = 1, label = \"Biased\", hjust = 0.45,\n                family = \"Source Sans Pro\") +\n  geomtextpath::geom_textline(aes(y = unbiased_posterior), linetype = \"solid\", color = \"#009FB7\",\n                size = 6, linewidth = 1, label = \"Corrected\", hjust = 0.4,\n                family = \"Source Sans Pro\") +\n  scale_x_continuous(breaks = seq(0, 1, 0.1)) +\n  labs(x = \"Proportion Water (p)\", y = \"Posterior Density\")"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""},{"path":"tooling-for-building-in-bookdown.html","id":"tooling-for-building-in-bookdown","chapter":"A Tooling for Building in Bookdown","heading":"A Tooling for Building in Bookdown","text":"Xie (2016)Xie (2016)Xie (2021a)Xie (2021a)(Grolemund, n.d.)(Grolemund, n.d.)(Riederer, n.d.)(Riederer, n.d.)(Xie, n.d.)(Xie, n.d.)","code":""},{"path":"reference-documents.html","id":"reference-documents","chapter":"B Reference Documents","heading":"B Reference Documents","text":"(Thompson, n.d.)(Thompson, n.d.)(McElreath 2022a)(McElreath 2022a)(McElreath, n.d.)(McElreath, n.d.)(Kurz, n.d.)(Kurz, n.d.)","code":""}]
